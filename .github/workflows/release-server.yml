name: Build QuickMark Server Binaries

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'latest'

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            suffix: .exe
          - target: x86_64-apple-darwin
            os: macos-13
            suffix: ''
          - target: aarch64-apple-darwin
            os: macos-14
            suffix: ''
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            suffix: ''
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            suffix: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-target-

      - name: Build quickmark-server
        run: cargo build --release --bin quickmark-server --target ${{ matrix.target }}

      - name: Prepare binary name
        id: binary-name
        shell: bash
        run: |
          BINARY_NAME="quickmark-server-${{ matrix.target }}${{ matrix.suffix }}"
          echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
          echo "source_path=target/${{ matrix.target }}/release/quickmark-server${{ matrix.suffix }}" >> $GITHUB_OUTPUT

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.binary-name.outputs.binary_name }}
          path: ${{ steps.binary-name.outputs.source_path }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries

      - name: Organize binaries
        run: |
          mkdir -p release-binaries
          find binaries -name "quickmark-server-*" -type f -exec mv {} release-binaries/ \;
          ls -la release-binaries/

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: release-binaries/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}