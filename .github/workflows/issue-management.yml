name: Issue Management

on:
  issues:
    types: [opened, closed, reopened]
  pull_request:
    types: [opened, closed, merged, converted_to_draft, ready_for_review]

jobs:
  manage-issue-status:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' && github.event_name == 'issues'
    steps:
      - name: Add triage status to new issues
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(label => label.name);
            // Only add triage label if it doesn't already exist
            if (!labels.includes('status: triage')) {
              github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['status: triage']
              });
            }

  manage-pr-status:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Update PR status labels
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const action = context.payload.action;
            // Get current labels
            const currentLabels = pr.labels.map(label => label.name);
            const statusLabels = currentLabels.filter(label => label.startsWith('status:'));
            let newLabel = '';
            switch (action) {
              case 'opened':
              case 'reopened':
                newLabel = pr.draft ? 'status: in-progress' : 'status: review';
                break;
              case 'converted_to_draft':
                newLabel = 'status: in-progress';
                break;
              case 'ready_for_review':
                newLabel = 'status: review';
                break;
              case 'closed':
                newLabel = pr.merged ? 'status: done' : null;
                break;
            }

            if (newLabel) {
              // Remove existing status labels
              if (statusLabels.length > 0) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: statusLabels[0]
                });
              }
              // Add new status label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: [newLabel]
              });
            }

  manage-linked-issues:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      - name: Close linked issues
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            // Look for "closes #123", "fixes #123", "resolves #123" patterns
            const issueRegex = /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi;
            let match;
            while ((match = issueRegex.exec(body)) !== null) {
              const issueNumber = parseInt(match[1]);
              try {
                // Update issue status to done
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: ['status: done']
                });
                // Remove other status labels
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                const statusLabelsToRemove = issue.data.labels
                  .filter(label => label.name.startsWith('status:') && label.name !== 'status: done')
                  .map(label => label.name);
                for (const labelName of statusLabelsToRemove) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    name: labelName
                  });
                }
              } catch (error) {
                console.log(`Could not update issue #${issueNumber}: ${error.message}`);
              }
            }